Installation instructions
=========================

Prerequisites
=============

You need the following to build this distribution:

* GCC (the C and C++ compilers only - other languages not needed).

* glibc 2.3 or later.  Older versions will not work since they lack the <ifaddrs.h> header.

* ncurses; other curses / termcap implementations might work, but are
  unsupported.

* lex and yacc; by default this package will use flex and bison, but
  byacc will probably work as well.

* GNU make.

* A POSIX shell, such as bash, in /bin/sh.

Security
========

See the SECURITY file for a discussion of security issues about the
BSD games.


Building and installation
=========================

1.  cd to the top level directory in the source distribution, i.e. the
    directory that contains this file.  There is not yet any support
    for building in a directory other than the source directory.

2.  Run "./configure" and configure the installation to your liking.

    The filesystem structure used defaults to that the the Filesystem
    Hierarchy Standard (FHS), version 2.0.  If you are using the older
    FSSTND 1.2, or a newer FHS, or wish to install into /usr/local,
    check the paths given and make changes as appropriate.

3.  Type "make".  Recent versions of gcc give many "missing initializer" warnings;
    these are harmless, as are the warnings in system headers
    mentioned above.  Likewise, "null format string" warnings are
    harmless; future versions of GCC will probably eliminate them, by
    allowing headers to specify whether it is OK for a format argument
    to a particular function to be null.

    At the start of the build, there will be many "No such file or
    directory" warnings from make.  Ignore these as long as make does
    not stop because of them: these refer to dependency files that
    make can regenerate for itself.  See "Automatic Dependencies" in
    the GNU Make manual for details.

    In the unlikely event of an internal compiler error, the build
    system supports generating the files of preprocessor output
    required for a bug report: if the error occurs while compiling
    "foo/bar.c", then "make foo/bar.i" will put the preprocessor
    output in "foo/bar.i", suitable for sending in a bug report along
    with details of compiler version and options used.  You may,
    however, wish to minimise the testcase before sending a bug
    report, if you have the time to do so.

4.  Save copies of any old versions of games you like and their
    datafiles, until you know that the new versions work.

5.  Become root.  (If, as an ordinary user, you are installing under
    your home directory, and have chosen not to set owners and groups
    on the installed files, there is of course no need to do this.)

6.  Type "make install".  If you want the installed binaries to be
    stripped, use "make install-strip" instead.  This saves disk
    space, but means that you cannot debug the installed binaries.

7.  If you had an old installation of bsd-games, check for file
    locations that have changed.  You will probably want to remove old
    executables and static data (formerly defaulting to installation
    in /usr/games/lib), and replace any empty score files that have
    been installed with your old ones (checking the permissions).

    The default locations changed again in 2.2, to those mandated by
    the new FHS 2.0 - manpages in /usr/share/man, variable data in
    /var/games.  In addition, huntd's default location has changed
    from /usr/sbin back to /usr/games and the location for dm to keep
    hidden games has changed from /usr/libexec/dm to
    /usr/lib/games/dm.

    In version 2.4, the recommended permissions on the directory for
    sail, if you installed it setgid, changed from 0775 to 2770; you
    may need to adjust the permissions manually if you had a previous
    installation of version 2.3.

8.  The robots scorefile format changed in version 2.8, so any old
    score file should be removed or renamed when first upgrading to
    this or a later version, and a new one created with the correct
    permissions.

9. "make distclean" will restore the source directory to the original
    unpacked state.  The automatically generated dependency files
    include paths to system headers, including those in gcc's internal
    header directory: if you have changed your compiler or library
    headers between building hunt and cleaning up, you can use
    "make distclean nodep=true" to avoid this causing problems.

    "make clean" will restore the sources to the state just after
    configuration.
    
    "make stopall" will force all hunt related processes to immediately
    terminate 

Further information
===================

The file BUGS lists known bugs.  The README file discusses how to
produce useful bug reports.

Joseph S. Myers
jsm@polyomino.org.uk
Andrea Baietti
ilbaio90cr@hotmail.it
Chiara Cerletti
kya90yaya@hotmail.it
Andrea Damiani
andredami@hotmail.com


Local Variables:
mode: text
End:
